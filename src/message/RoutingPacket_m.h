//
// Generated file, do not edit! Created by nedtool 5.7 from message/RoutingPacket.msg.
//

#ifndef __STD_ROUTINGPACKET_M_H
#define __STD_ROUTINGPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include <bits/stdc++.h>
typedef std::vector<int> Route;
// }}


namespace std {

/**
 * Class generated from <tt>message/RoutingPacket.msg:28</tt> by nedtool.
 * <pre>
 * packet RoutingPacket
 * {
 *     int packetId = 3;
 *     int senderId;
 *     int receiverId;
 *     int destinationNodeId;
 *     Route route;
 * }
 * </pre>
 */
class RoutingPacket : public ::omnetpp::cPacket
{
  protected:
    int packetId;
    int senderId;
    int receiverId;
    int destinationNodeId;
    Route route;

  private:
    void copy(const RoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RoutingPacket&);

  public:
    RoutingPacket(const char *name=nullptr, short kind=0);
    RoutingPacket(const RoutingPacket& other);
    virtual ~RoutingPacket();
    RoutingPacket& operator=(const RoutingPacket& other);
    virtual RoutingPacket *dup() const override {return new RoutingPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);
    virtual int getReceiverId() const;
    virtual void setReceiverId(int receiverId);
    virtual int getDestinationNodeId() const;
    virtual void setDestinationNodeId(int destinationNodeId);
    virtual Route& getRoute();
    virtual const Route& getRoute() const {return const_cast<RoutingPacket*>(this)->getRoute();}
    virtual void setRoute(const Route& route);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RoutingPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RoutingPacket& obj) {obj.parsimUnpack(b);}

} // namespace std

#endif // ifndef __STD_ROUTINGPACKET_M_H

