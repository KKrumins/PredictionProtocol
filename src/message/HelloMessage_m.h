//
// Generated file, do not edit! Created by nedtool 5.7 from message/HelloMessage.msg.
//

#ifndef __STD_HELLOMESSAGE_M_H
#define __STD_HELLOMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include <bits/stdc++.h>
typedef std::vector<int> MyNeigbours;
// }}


namespace std {

/**
 * Class generated from <tt>message/HelloMessage.msg:27</tt> by nedtool.
 * <pre>
 * packet HelloMessage
 * {
 *     int packetId = 1;
 *     int senderId;
 *     simtime_t waitInterval;
 *     MyNeigbours myNeigbours;
 * }
 * </pre>
 */
class HelloMessage : public ::omnetpp::cPacket
{
  protected:
    int packetId;
    int senderId;
    ::omnetpp::simtime_t waitInterval;
    MyNeigbours myNeigbours;

  private:
    void copy(const HelloMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HelloMessage&);

  public:
    HelloMessage(const char *name=nullptr, short kind=0);
    HelloMessage(const HelloMessage& other);
    virtual ~HelloMessage();
    HelloMessage& operator=(const HelloMessage& other);
    virtual HelloMessage *dup() const override {return new HelloMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);
    virtual ::omnetpp::simtime_t getWaitInterval() const;
    virtual void setWaitInterval(::omnetpp::simtime_t waitInterval);
    virtual MyNeigbours& getMyNeigbours();
    virtual const MyNeigbours& getMyNeigbours() const {return const_cast<HelloMessage*>(this)->getMyNeigbours();}
    virtual void setMyNeigbours(const MyNeigbours& myNeigbours);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HelloMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HelloMessage& obj) {obj.parsimUnpack(b);}

} // namespace std

#endif // ifndef __STD_HELLOMESSAGE_M_H

